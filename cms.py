from dataclasses import dataclass
from os import listdir

projects_dir = "/home/bella/Documents/General/deploy/"
project_template = """
<Project
    title="{title}"
    description="{description}"
>
  {links}
</Project>
"""
link_template = """
<Link text="{display_name}" href="{addrs}"/>
"""
astro_template = """
---
// code generated by cms.py, any edit should be made there or in the layout pages
import Project from "../layouts/project.astro"
import Link from "../layouts/project-link.astro"
---
<>
{projects}
</>
"""
destiny = "./src/components/projects.astro"

@dataclass
class Project:
    name: str
    description: str
    links: List[Link]

@dataclass
class Link:
    addrs: str
    display_name: str

def main():
    projects = read_projects()
    html = get_html(projects)
    html = astro_template.format(projects=html)
    with open(destiny, "w") as f:
        f.write(html)

def get_html(projects):
    return "\n".join(list(map(project_to_html, projects)))

def project_to_html(project):
    links = "\n".join(list(map(link_to_html, project.links)))
    html = project_template.format(
        title=project.name,
        description=project.description,
        links=links
    ).strip()
    return(html)

def link_to_html(link):
    html = link_template.format(
        display_name=link.display_name, addrs=link.addrs
    ).strip()
    return html

def read_projects():
    projects_addrs = listdir(projects_dir)
    projects = list(map(convert_addr_to_project, projects_addrs))
    return projects

def convert_addr_to_project(project):
    with open(projects_dir+project) as file:
        text = file.read()
        title = project[:-3]
        temp = text.split("---")
        description = temp[0].strip()
        links = temp[1].strip().split("\n")
        links = list(map(convert_text_to_link, links))
        return Project(title, description, links)

def convert_text_to_link(text):
    display_end = text.find("]")
    addrs_start = text.find("(") + 1
    display = text[1:display_end]
    addrs = text[addrs_start:-1]
    return Link(addrs, display)

if __name__ == "__main__":
    main()
